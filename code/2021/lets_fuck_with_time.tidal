setcps 0.5

let fun = whenmod 16 12 (const $ s "")

d1 $ whenmod 16 12 (const $ s "clubkick*4" # crush (slow 4 $ range 8 1 saw) # cps (slow 4 $ range 0.5 1 saw)) $ s "clubkick*4" # cps 0.5
d2 $ whenmod 16 12 (const $ chop 2 $ s "fire/2" # distort 0.1 # crush (slow 4 $ range 8 4 saw) # speed (slow 4 $ range 0.5 4 saw)) $ (0.25 ~>) $ s "" --s "sn:1*2"

do
  d3 $ fun $ loopAt "4 8 [8 4] 16" $ rev $ chop 64 $ s "forhowlong" # n "<0 1 0 [1 3]>"
  d4 $ silence
  d5 $ silence
  d6 $ silence

do
  d3 $ fun $ loopAt "4 8 [8 4] 16" $ rev $ chop 64 $ s "forhowlong" # n "2" # gain 0.85
  let pat = "[0 1 0 1 0 0 1 1]"
  d4 $ fun $ gain pat # s "bd"
  d5 $ fun $ (0.25 ~>) $ gain pat # s "hh"
  d6 $ fun $ fast 2 $ s "~ [hh:5*2] ~ ~"


hush



d3 $ slow 1 $ loopAt "4 8 [8 4] 16" $ rev $ chop 64 $ s "forhowlong" # n "<0 1 0 3>"
d3 $ slow 1 $ loopAt "4 8 [8 4] 16" $ rev $ chop 64 $ s "forhowlong" # n "2"


hush







d3 $ s "bd sd(3,8)" # cps (slow 4 $ range 0.5 0.25 saw)
d3 $ silence
once $ s "bd sd(3,8)" # cps (range 0.25 0.5 saw)

d3 $ silence
-- figure out some time shit
once $ s "bd sd(3,8)" # cps (slow 8 $ 0.5 + saw)
once $ s "bd sd(3,8)" # cps (slow 8 $ 1)
-- reversing samples
once $ s "print" # speed "-1"
d1 $ s "bd@4 bd bd@5"

d1 $ s "{bd cp hh}%8"
d1 $ s "{bd bd bd bd, cp cp hh}"
hush
